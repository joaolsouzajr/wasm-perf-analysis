cmake_minimum_required (VERSION 3.7)
project (helloopencv)

# The version number.
set (crosscompile_VERSION_MAJOR 1)
set (crosscompile_VERSION_MINOR 0)

if(UNIX AND NOT APPLE)
    set(LINUX TRUE)
endif()

if(WASM)
    message(">>> WebAssembly - WASM=${WASM}")
    set(CMAKE_C_COMPILER "emcc")
    set(CMAKE_CXX_COMPILER "em++")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --bind --std=c++17 -s WASM=1 -s ALLOW_MEMORY_GROWTH=1")
    set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}../../../webapp)
    set(OpenCV_DIR "~/opencv/build_wasm")
    include_directories("~/emsdk/emscripten/1.38.28/system/include/")
elseif(UNIX)
    message(STATUS ">>> Linux/OSx")
    set(BUILD_SHARED_LIBS OFF)
    include_directories("~/emsdk/emscripten/1.38.28/system/include/")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++17")
elseif(WIN32)
    message(STATUS ">>> Windows")
    set(BUILD_SHARED_LIBS OFF)
    include_directories("D:/Apps/emsdk/fastcomp/emscripten/system/include")
    set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT")
    set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MTd")
    add_compile_options("/std:c++17")
endif()

include_directories("include/")
find_package( OpenCV REQUIRED )
include_directories(${OpenCV_INCLUDE_DIRS})
link_directories(${OpenCV_LIB_DIR})

if(NOT WASM)
    add_executable(helloopencv src/main.cpp)
    target_link_libraries( helloopencv ${OpenCV_LIBS} )

    add_executable(readwriteimg src/rwimg.cpp)
    target_link_libraries( readwriteimg ${OpenCV_LIBS} )

    add_executable(myimageproc_test src/myimageproc_test.cpp src/myimageproc.cpp)
    target_link_libraries( myimageproc_test ${OpenCV_LIBS} )
else()
    add_executable(myimageproc.html src/myimageproc_js.cpp src/myimageproc.cpp)
    target_link_libraries(myimageproc.html ${OpenCV_LIBS})
endif()
